# # Import necessary libraries
# import os
# import pyotp
# import qrcode
# import jwt
# import datetime
# from datetime import UTC
# from flask import Flask, request, render_template, redirect, url_for, flash, session, make_response, send_file
# from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
# from werkzeug.security import generate_password_hash, check_password_hash
# from flask_sqlalchemy import SQLAlchemy
# from functools import wraps
# import re
# from cryptography.fernet import Fernet
# import smtplib
# from email.mime.text import MIMEText
# from email.mime.multipart import MIMEMultipart
# import csv
# from io import StringIO

# # Initialize Flask application
# app = Flask(__name__)
# app.secret_key = os.urandom(24).hex()
# app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///secure_health.db'
# app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# # Email configuration
# SMTP_SERVER = 'smtp.gmail.com'
# SMTP_PORT = 587
# SMTP_USERNAME = 'your_email@gmail.com'  # Replace
# SMTP_PASSWORD = 'your_app_password'  # Replace

# # JWT Configuration
# JWT_SECRET = os.urandom(32).hex()
# JWT_ALGORITHM = 'HS256'
# JWT_EXPIRATION_MINUTES = 30

# # Encryption Key for sensitive fields
# ENCRYPTION_KEY = Fernet.generate_key()
# cipher = Fernet(ENCRYPTION_KEY)

# # Initialize SQLAlchemy
# db = SQLAlchemy(app)

# # Initialize Flask-Login
# login_manager = LoginManager()
# login_manager.init_app(app)
# login_manager.login_view = 'login'

# # Database Models
# class User(UserMixin, db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     username = db.Column(db.String(150), unique=True, nullable=False)
#     password_hash = db.Column(db.String(200))
#     totp_secret = db.Column(db.String(32))
#     role = db.Column(db.String(10), default='Patient')  # Admin, Doctor, Patient
#     email = db.Column(db.String(150), unique=True, nullable=False)
#     name = db.Column(db.String(150))

#     def verify_password(self, password):
#         return check_password_hash(self.password_hash, password)

#     def verify_totp(self, token):
#         totp = pyotp.TOTP(self.totp_secret)
#         return totp.verify(token)

# class Patient(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
#     medical_history = db.Column(db.Text)  # Encrypted
#     user = db.relationship('User', backref=db.backref('patient', lazy=True))

# class Appointment(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     patient_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
#     doctor_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
#     date = db.Column(db.DateTime, nullable=False)
#     status = db.Column(db.String(20), default='Scheduled')

# class Prescription(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     patient_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
#     doctor_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
#     medication = db.Column(db.Text)  # Encrypted
#     dosage = db.Column(db.Text)  # Encrypted
#     issued_at = db.Column(db.DateTime, default=datetime.datetime.now(UTC))

# class Diagnosis(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     patient_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
#     doctor_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
#     diagnosis = db.Column(db.Text)  # Encrypted
#     notes = db.Column(db.Text)  # Encrypted
#     created_at = db.Column(db.DateTime, default=datetime.datetime.now(UTC))

# class AuditLog(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
#     action = db.Column(db.String(255), nullable=False)
#     timestamp = db.Column(db.DateTime, default=datetime.datetime.now(UTC))
#     details = db.Column(db.Text)

# class PasswordResetToken(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
#     token = db.Column(db.String(100), unique=True, nullable=False)
#     expires_at = db.Column(db.DateTime, nullable=False)
#     used = db.Column(db.Boolean, default=False)

# # Flask-Login user loader
# @login_manager.user_loader
# def load_user(user_id):
#     return db.session.get(User, int(user_id))

# # Role-based decorator
# def role_required(roles):
#     def decorator(f):
#         @wraps(f)
#         def decorated_function(*args, **kwargs):
#             if not current_user.is_authenticated or current_user.role not in roles:
#                 flash('Access denied.')
#                 return redirect(url_for('dashboard'))
#             return f(*args, **kwargs)
#         return decorated_function
#     return decorator

# # Validate password
# def validate_password(password):
#     if len(password) < 8:
#         return False
#     if not re.search(r'[A-Z]', password):
#         return False
#     if not re.search(r'[a-z]', password):
#         return False
#     if not re.search(r'[0-9]', password):
#         return False
#     if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
#         return False
#     return True

# # Generate JWT
# def generate_jwt(username):
#     payload = {
#         'sub': username,
#         'exp': datetime.datetime.now(UTC) + datetime.timedelta(minutes=JWT_EXPIRATION_MINUTES)
#     }
#     return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)

# # Verify JWT
# def verify_jwt(token):
#     try:
#         return jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
#     except (jwt.ExpiredSignatureError, jwt.InvalidTokenError):
#         return None

# # Log actions
# def log_action(user_id, action, details=None):
#     audit_log = AuditLog(user_id=user_id, action=action, details=details)
#     db.session.add(audit_log)
#     db.session.commit()

# # Send reset email
# def send_reset_email(email, token):
#     msg = MIMEMultipart()
#     msg['From'] = SMTP_USERNAME
#     msg['To'] = email
#     msg['Subject'] = 'Password Reset Request'
#     reset_url = url_for('reset_password', token=token, _external=True, _scheme='https')
#     body = f"""
#     Hello,
#     Please click the link to reset your password: {reset_url}
#     This link expires in 1 hour.
#     """
#     msg.attach(MIMEText(body, 'plain'))
#     try:
#         with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
#             server.starttls()
#             server.login(SMTP_USERNAME, SMTP_PASSWORD)
#             server.send_message(msg)
#         return True
#     except Exception as e:
#         print(f"Email error: {str(e)}")
#         return False

# # Database-level RBAC
# def setup_db_roles():
#     with app.app_context():
#         db.engine.execute("CREATE ROLE IF NOT EXISTS admin_role;")
#         db.engine.execute("CREATE ROLE IF NOT EXISTS doctor_role;")
#         db.engine.execute("CREATE ROLE IF NOT EXISTS patient_role;")
#         db.engine.execute("GRANT ALL ON ALL TABLES IN SCHEMA public TO admin_role;")
#         db.engine.execute("GRANT SELECT, UPDATE ON patient, prescription, diagnosis, appointment TO doctor_role;")
#         db.engine.execute("GRANT SELECT ON patient, prescription, appointment WHERE user_id = current_user TO patient_role;")

# # Initialize admin user
# def init_admin_user():
#     admin_username = 'admin'
#     admin_email = 'admin@securehealth.com'
#     admin_password = 'Admin123!'
#     if not User.query.filter_by(username=admin_username).first():
#         totp_secret = pyotp.random_base32()
#         password_hash = generate_password_hash(admin_password)
#         admin_user = User(
#             username=admin_username,
#             password_hash=password_hash,
#             totp_secret=totp_secret,
#             role='Admin',
#             email=admin_email,
#             name='Administrator'
#         )
#         db.session.add(admin_user)
#         db.session.commit()
#         log_action(admin_user.id, 'Admin Creation', 'Created admin user')

# # Generate CSRF token
# @app.before_request
# def generate_csrf_token():
#     if 'csrf_token' not in session:
#         session['csrf_token'] = os.urandom(16).hex()

# # Initialize database
# with app.app_context():
#     db.create_all()
#     setup_db_roles()
#     init_admin_user()

# # Routes
# @app.route('/')
# def index():
#     return redirect(url_for('login'))

# @app.route('/register', methods=['GET', 'POST'])
# def register():
#     if request.method == 'POST':
#         username = request.form['username']
#         password = request.form['password']
#         password_confirm = request.form['password_confirm']
#         email = request.form['email']
#         name = request.form['name']
#         role = request.form['role']  # Patient, Doctor, Admin

#         if password != password_confirm:
#             flash('Passwords do not match.')
#             return redirect(url_for('register'))

#         if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():
#             flash('Username or email already exists.')
#             return redirect(url_for('register'))

#         if not validate_password(password):
#             flash('Password must be at least 8 characters with uppercase, lowercase, numbers, and special characters.')
#             return redirect(url_for('register'))

#         totp_secret = pyotp.random_base32()
#         password_hash = generate_password_hash(password)
#         user = User(username=username, password_hash=password_hash, totp_secret=totp_secret, email=email, name=name, role=role)
#         db.session.add(user)
#         db.session.commit()

#         if role == 'Patient':
#             patient = Patient(user_id=user.id, medical_history=cipher.encrypt(b"").decode())
#             db.session.add(patient)
#             db.session.commit()

#         uri = pyotp.TOTP(totp_secret).provisioning_uri(name=username, issuer_name="SecureHealth")
#         img = qrcode.make(uri)
#         os.makedirs("static/qrcodes", exist_ok=True)
#         img_path = f"static/qrcodes/{username}.png"
#         img.save(img_path)

#         log_action(user.id, 'User Registration', f'User {username} registered as {role}')
#         flash("Scan the QR code and login with your OTP.")
#         return redirect(url_for('two_factor', username=username))

#     return render_template('register.html')

# @app.route('/login', methods=['GET', 'POST'])
# def login():
#     if request.method == 'POST':
#         username = request.form['username']
#         password = request.form['password']
#         user = User.query.filter_by(username=username).first()
#         if user and user.verify_password(password):
#             log_action(user.id, 'Login Attempt', 'Successful password verification')
#             return redirect(url_for('two_factor', username=username))
#         else:
#             log_action(None, 'Login Attempt', f'Failed login for {username}')
#             flash('Invalid username or password.')
#     return render_template('login.html')

# @app.route('/forgot_password', methods=['GET', 'POST'])
# def forgot_password():
#     if request.method == 'POST':
#         email = request.form['email']
#         user = User.query.filter_by(email=email).first()
#         if not user:
#             flash('Email not registered.')
#             return redirect(url_for('forgot_password'))

#         token = os.urandom(32).hex()
#         expires_at = datetime.datetime.now(UTC) + datetime.timedelta(hours=1)
#         reset_token = PasswordResetToken(user_id=user.id, token=token, expires_at=expires_at, used=False)
#         db.session.add(reset_token)
#         db.session.commit()

#         if send_reset_email(email, token):
#             log_action(user.id, 'Password Reset Request', f'Reset requested for {email}')
#             flash('Password reset link sent to your email.')
#         else:
#             flash('Error sending email.')
#         return redirect(url_for('forgot_password'))

#     return render_template('forgot_password.html')

# @app.route('/reset_password/<token>', methods=['GET', 'POST'])
# def reset_password(token):
#     reset_token = PasswordResetToken.query.filter_by(token=token, used=False).first()
#     now_utc = datetime.datetime.now(datetime.timezone.utc)
#     if not reset_token or reset_token.expires_at.replace(tzinfo=datetime.timezone.utc) < now_utc:
#         flash('Invalid or expired reset link.')
#         return redirect(url_for('forgot_password'))

#     if request.method == 'POST':
#         password = request.form['password']
#         password_confirm = request.form['password_confirm']
#         if password != password_confirm:
#             flash('Passwords do not match.')
#             return redirect(url_for('reset_password', token=token))

#         if not validate_password(password):
#             flash('Password must be at least 8 characters with uppercase, lowercase, numbers, and special characters.')
#             return redirect(url_for('reset_password', token=token))

#         user = db.session.get(User, reset_token.user_id)
#         user.password_hash = generate_password_hash(password)
#         reset_token.used = True
#         db.session.commit()
#         log_action(user.id, 'Password Reset', f'Password reset for {user.email}')
#         flash('Password reset successfully.')
#         return redirect(url_for('login'))

#     return render_template('reset_password.html', token=token)
# @app.route('/patient/<int:patient_id>')
# @login_required
# @role_required(['Doctor'])
# def view_patient(patient_id):
#     patient = Patient.query.filter_by(user_id=patient_id).first()
#     if not patient:
#         flash('Patient not found.')
#         return redirect(url_for('dashboard'))
#     prescriptions = Prescription.query.filter_by(patient_id=patient_id).all()
#     diagnoses = Diagnosis.query.filter_by(patient_id=patient_id).all()
#     return render_template('view_patient.html', patient=patient, prescriptions=prescriptions, diagnoses=diagnoses)

# @app.route('/diagnosis/add/<int:patient_id>', methods=['GET', 'POST'])
# @login_required
# @role_required(['Doctor'])
# def add_diagnosis(patient_id):
#     if request.method == 'POST':
#         diagnosis = cipher.encrypt(request.form['diagnosis'].encode()).decode()
#         notes = cipher.encrypt(request.form['notes'].encode()).decode() if request.form['notes'] else ''
#         diag = Diagnosis(patient_id=patient_id, doctor_id=current_user.id, diagnosis=diagnosis, notes=notes)
#         db.session.add(diag)
#         db.session.commit()
#         log_action(current_user.id, 'Add Diagnosis', f'Added diagnosis for patient {patient_id}')
#         flash('Diagnosis added successfully.')
#         return redirect(url_for('view_patient', patient_id=patient_id))
#     return render_template('add_diagnosis.html', patient_id=patient_id)

# @app.route('/appointment/cancel/<int:appt_id>', methods=['POST'])
# @login_required
# @role_required(['Patient'])
# def cancel_appointment(appt_id):
#     appt = Appointment.query.get(appt_id)
#     if not appt or appt.patient_id != current_user.id:
#         flash('Appointment not found or access denied.')
#         return redirect(url_for('dashboard'))
#     appt.status = 'Cancelled'
#     db.session.commit()
#     log_action(current_user.id, 'Cancel Appointment', f'Cancelled appointment ID {appt_id}')
#     flash('Appointment cancelled successfully.')
#     return redirect(url_for('dashboard'))

# @app.route('/2fa', methods=['GET', 'POST'])
# def two_factor():
#     if request.method == 'POST':
#         otp = request.form['otp']
#         username = request.form['username']
#         user = User.query.filter_by(username=username).first()
#         if user and user.verify_totp(otp):
#             login_user(user)
#             session['is_2fa_verified'] = True
#             token = generate_jwt(username)
#             session['jwt'] = token
#             log_action(user.id, '2FA Login', 'Successful 2FA verification')
#             return redirect(url_for('dashboard'))
#         else:
#             log_action(user.id if user else None, '2FA Attempt', 'Failed 2FA verification')
#             flash('Invalid OTP.')
#             return redirect(url_for('two_factor', username=username))

#     username = request.args.get('username')
#     user = User.query.filter_by(username=username).first()
#     if not user:
#         flash("User not found.")
#         return redirect(url_for('login'))

#     uri = pyotp.TOTP(user.totp_secret).provisioning_uri(name=username, issuer_name="SecureHealth")
#     img = qrcode.make(uri)
#     os.makedirs("static/qrcodes", exist_ok=True)
#     img_path = f"static/qrcodes/{username}.png"
#     img.save(img_path)
#     return render_template('two_factor.html', username=username, qr_path=img_path)

# @app.route('/dashboard')
# @login_required
# def dashboard():
#     if not session.get('is_2fa_verified'):
#         return redirect(url_for('two_factor', username=current_user.username))

#     token = session.get('jwt')
#     decoded = verify_jwt(token)
#     if not decoded:
#         log_action(current_user.id, 'Session Expired', 'Session expired')
#         flash('Session expired. Please login again.')
#         return redirect(url_for('login'))

#     if current_user.role == 'Patient':
#         appointments = Appointment.query.filter_by(patient_id=current_user.id).all()
#         prescriptions = Prescription.query.filter_by(patient_id=current_user.id).all()
#     elif current_user.role == 'Doctor':
#         appointments = Appointment.query.filter_by(doctor_id=current_user.id).all()
#         patients = Patient.query.join(User).filter(User.id == Patient.user_id).all()
#     else:  # Admin
#         appointments = Appointment.query.all()
#         users = User.query.all()

#     response = make_response(render_template('dashboard.html', role=current_user.role, appointments=appointments))
#     response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
#     return response

# @app.route('/appointments/book', methods=['GET', 'POST'])
# @login_required
# @role_required(['Patient'])
# def book_appointment():
#     if request.method == 'POST':
#         doctor_id = request.form['doctor_id']
#         date = datetime.datetime.strptime(request.form['date'], '%Y-%m-%dT%H:%M')
#         appointment = Appointment(patient_id=current_user.id, doctor_id=doctor_id, date=date)
#         db.session.add(appointment)
#         db.session.commit()
#         log_action(current_user.id, 'Book Appointment', f'Booked appointment with doctor {doctor_id}')
#         flash('Appointment booked successfully.')
#         return redirect(url_for('dashboard'))
#     doctors = User.query.filter_by(role='Doctor').all()
#     return render_template('appointments.html', doctors=doctors)

# @app.route('/prescriptions/add', methods=['GET', 'POST'])
# @login_required
# @role_required(['Doctor'])
# def add_prescription():
#     if request.method == 'POST':
#         patient_id = request.form['patient_id']
#         medication = cipher.encrypt(request.form['medication'].encode()).decode()
#         dosage = cipher.encrypt(request.form['dosage'].encode()).decode()
#         prescription = Prescription(patient_id=patient_id, doctor_id=current_user.id, medication=medication, dosage=dosage)
#         db.session.add(prescription)
#         db.session.commit()
#         log_action(current_user.id, 'Add Prescription', f'Added prescription for patient {patient_id}')
#         flash('Prescription added successfully.')
#         return redirect(url_for('dashboard'))
#     patients = Patient.query.join(User).filter(User.id == Patient.user_id).all()
#     return render_template('prescriptions.html', patients=patients)

# @app.route('/admin/manage_users', methods=['GET', 'POST'])
# @login_required
# @role_required(['Admin'])
# def manage_users():
#     if request.method == 'POST':
#         action = request.form['action']
#         if action == 'add_user':
#             username = request.form['username']
#             email = request.form['email']
#             name = request.form['name']
#             password = request.form['password']
#             role = request.form['role']
#             if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():
#                 flash('Username or email exists.')
#                 return redirect(url_for('manage_users'))
#             if not validate_password(password):
#                 flash('Invalid password format.')
#                 return redirect(url_for('manage_users'))
#             totp_secret = pyotp.random_base32()
#             password_hash = generate_password_hash(password)
#             user = User(username=username, password_hash=password_hash, totp_secret=totp_secret, email=email, name=name, role=role)
#             db.session.add(user)
#             db.session.commit()
#             log_action(current_user.id, 'User Creation', f'Created user: {username}')
#             flash('User created.')
#         elif action == 'delete':
#             user_id = request.form['user_id']
#             user = db.session.get(User, user_id)
#             db.session.delete(user)
#             db.session.commit()
#             log_action(current_user.id, 'User Deletion', f'Deleted user: {user.username}')
#             flash('User deleted.')
#     users = User.query.all()
#     return render_template('admin.html', users=users)

# @app.route('/admin/logs/export')
# @login_required
# @role_required(['Admin'])
# def export_logs():
#     logs = AuditLog.query.all()
#     output = StringIO()
#     writer = csv.writer(output)
#     writer.writerow(['ID', 'User ID', 'Action', 'Timestamp', 'Details'])
#     for log in logs:
#         writer.writerow([log.id, log.user_id, log.action, log.timestamp, log.details])
#     output.seek(0)
#     return send_file(output, mimetype='text/csv', as_attachment=True, attachment_filename='audit_logs.csv')

# @app.route('/logout')
# @login_required
# def logout():
#     user_id = current_user.id
#     logout_user()
#     session.pop('jwt', None)
#     session.pop('is_2fa_verified', None)
#     log_action(user_id, 'Logout', 'User logged out')
#     flash('Logged out successfully.')
#     return redirect(url_for('login'))

# @app.after_request
# def apply_security_headers(response):
#     response.headers['X-Content-Type-Options'] = 'nosniff'
#     response.headers['X-Frame-Options'] = 'DENY'
#     response.headers['X-XSS-Protection'] = '1; mode=block'
#     response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
#     return response

# if __name__ == '__main__':
#     app.run(ssl_context=('certs/server.crt', 'certs/server.key'), host='0.0.0.0', port=5000, debug=True)
